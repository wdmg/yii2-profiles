<?php

namespace wdmg\profiles\models;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use wdmg\base\behaviors\SluggableBehavior;
use wdmg\base\models\ActiveRecordML;
use wdmg\helpers\ArrayHelper;
use wdmg\validators\ReservedValidator;
use wdmg\profiles\models\Profiles;

/**
 * This is the model class for table "{{%profiles_fields}}".
 *
 * @property int $id
 * @property int $source_id
 * @property string $name
 * @property string $label
 * @property string $description
 * @property int $type
 * @property int $sort_order
 * @property string $params
 * @property int $is_required
 * @property int $status
 */
class Fields extends ActiveRecordML
{

    const STATUS_DELETED = -1; // Profile field been deleted
    const STATUS_DRAFT = 0; // Profile field has draft
    const STATUS_PUBLISHED = 1; // Profile field has been published
    const STATUS_SUSPENDED = 2; // Profile field has been suspended

    private $_fieldsTypes = [
        1 => 'text',
        2 => 'textarea',
        3 => 'checkbox',
        4 => 'image',
        5 => 'file',
        6 => 'hidden',
        7 => 'password',
        8 => 'radio',
        9 => 'color',
        10 => 'date',
        11 => 'datetime',
        12 => 'datetime-local',
        13 => 'email',
        14 => 'number',
        15 => 'range',
        16 => 'search',
        17 => 'tel',
        18 => 'time',
        19 => 'url',
        20 => 'month',
        21 => 'week'
    ];

    public $attribute;

    public $reservedFields = [
        'admin',
        'administrator',
        'root',
        'superuser',
        'supervisor',
        'timezone',
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%profiles_fields}}';
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (isset($this->_module->reservedFields))
            $this->reservedFields = $this->_module->reservedFields;

    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['sluggable'] = [
            'class' => SluggableBehavior::class,
            'attribute' => 'label',
            'slugAttribute' => 'name',
            'replacement' => '_',
            'immutable' => true
        ];
        return $behaviors;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $rules = parent::rules();
        $rules = ArrayHelper::merge($rules, [
            [['label', 'type', 'status'], 'required'],
            [['source_id', 'type', 'sort_order', 'status'], 'integer'],
            [['params'], 'string'],
            [['label', 'name'], 'string', 'max' => 64],
            ['name', 'match', 'pattern' => '/^[A-za-z]/', 'message' => Yii::t('app/modules/profiles','The attribute must begin with a letter.')],
            ['name', 'match', 'pattern' => '/^[A-Za-z0-9\_]+$/', 'message' => Yii::t('app/modules/profiles','It allowed only Latin alphabet, numbers and «_» character.')],
            ['name', ReservedValidator::class,
                'stoplist' => $this->getReservedAttributes(),
                'strict' => false,
                'message' => Yii::t('app/modules/profiles','You can not use this value `{value}` for field `{attribute}`'),
                'on' => self::SCENARIO_CREATE
            ],
            [['placeholder'], 'string', 'max' => 124],
            [['description'], 'string', 'max' => 255],
            [['created_at', 'updated_at'], 'safe'],
        ]);

        if (class_exists('\wdmg\users\models\Users')) {
            $rules[] = [['created_by', 'updated_by'], 'safe'];
        }

        return $rules;
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app/modules/profiles', 'ID'),
            'source_id' => Yii::t('app/modules/profiles', 'Source ID'),
            'label' => Yii::t('app/modules/profiles', 'Field label'),
            'locale' => Yii::t('app/modules/profiles', 'Locale'),
            'name' => Yii::t('app/modules/profiles', 'Input name'),
            'placeholder' => Yii::t('app/modules/profiles', 'Placeholder'),
            'description' => Yii::t('app/modules/profiles', 'Description'),
            'type' => Yii::t('app/modules/profiles', 'Type'),
            'sort_order' => Yii::t('app/modules/profiles', 'Sort order'),
            'params' => Yii::t('app/modules/profiles', 'Params'),
            'is_required' => Yii::t('app/modules/profiles', 'Is required?'),
            'status' => Yii::t('app/modules/profiles', 'Status'),
            'created_at' => Yii::t('app/modules/profiles', 'Created at'),
            'created_by' => Yii::t('app/modules/profiles', 'Created by'),
            'updated_at' => Yii::t('app/modules/profiles', 'Updated at'),
            'updated_by' => Yii::t('app/modules/profiles', 'Updated by'),
        ];
    }

    private function getReservedAttributes()
    {
        $profiles = new Profiles();
        $stopList = ArrayHelper::merge($this->attributes(), $profiles->attributes());

        if (!empty($this->reservedFields) && is_array($this->reservedFields))
            return ArrayHelper::merge($stopList, $this->reservedFields);
        else
            return $stopList;
    }

    /**
     * {@inheritdoc}
     */
    public function afterFind()
    {
        parent::afterFind();
        $this->attribute = str_replace('-', '_', $this->name);
    }

    /**
     * {@inheritdoc}
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        if ($insert && is_null($this->source_id))
            Profiles::addFieldColumn($this->name, $this->type, null);

        if (!$insert && is_null($this->source_id))
            self::updateAll(['name' => $this->name], ['source_id' => $this->id]);
    }

    /**
     * {@inheritdoc}
     */
    public function beforeDelete()
    {
        if (is_null($this->source_id))
            self::deleteAll(['source_id' => $this->id]);

        return parent::beforeDelete();
    }

    /**
     * {@inheritdoc}
     */
    public function afterDelete()
    {
        if (is_null($this->source_id))
            Profiles::dropFieldColumn($this->name);

        parent::afterDelete();
    }

    /**
     * @return array
     */
    public function getFieldsTypes()
    {
        return $this->_fieldsTypes;
    }

    /**
     * @return array
     */
    public function getFieldsTypesList($allTypes = false)
    {
        $list = [];
        if ($allTypes)
            $list['*'] = Yii::t('app/modules/profiles', 'All types');

        $list = ArrayHelper::merge($list, $this->getFieldsTypes());

        return $list;
    }

    /**
     * @return array
     */
    public function getIsRequiredList($allVariants = false)
    {
        $list = [];
        if ($allVariants) {
            $list = [
                '*' => Yii::t('app/modules/profiles', 'All variants')
            ];
        }

        return ArrayHelper::merge($list, [
            0 => Yii::t('app/modules/profiles', 'Required'),
            1 => Yii::t('app/modules/profiles', 'Not required'),
        ]);
    }

    /**
     * @return array
     */
    public function getStatusesList($allStatuses = false)
    {
        $list = [];
        if ($allStatuses) {
            $list = [
                '*' => Yii::t('app/modules/profiles', 'All statuses')
            ];
        }

        return ArrayHelper::merge($list, [
            self::STATUS_DRAFT => Yii::t('app/modules/profiles', 'Draft'),
            self::STATUS_PUBLISHED => Yii::t('app/modules/profiles', 'Published'),
            self::STATUS_DELETED => Yii::t('app/modules/profiles', 'Deleted'),
            self::STATUS_SUSPENDED => Yii::t('app/modules/profiles', 'Suspended'),
        ]);
    }
}
